def celsius_to_romer(temp):
    # Your code here.
    return (temp * 21/40) + 7.5


def is_divisible(wall_length, pixel_size):
    # Your code here.
    return wall_length%pixel_size == 0
    

def guess_blue(blue_start, red_start, blue_pulled, red_pulled):
    # Your code here.
    return (blue_start-blue_pulled)/((blue_start-blue_pulled)+(red_start-red_pulled))
    
def box_capacity(length, width, height):
    # Your code here.
    return (length*width*height)*(0.75)**3
    

def quadratic_formula(a, b, c):
    import math
    root1 = (-b+math.sqrt((b**2)-(4*(a*c))))/(2*a)
    
    root2 = (-b-math.sqrt((b**2)-(4*(a*c))))/(2*a)
    
    return [root1, root2]
    
 
Logic / Control Flow

def update_light(current):
    # Your code here.
    if     current == 'green':
        return 'yellow'
    elif   current == 'yellow':
        return 'red'
    else: 
        return 'green'
     
        
        
        
 def take_umbrella(weather, rain_chance):
    # Your code here.
    a = weather == 'rainy'

    b = weather == 'cloudy' and rain_chance > 0.20

    c = weather == 'sunny' and rain_chance > 0.5
    
    return bool(a or b or c)
  
  
  
  def my_add(a, b):
    # Your code here.
    try:
        return a+b
    except TypeError:
        return None
        

def color_probability(color, texture):
    # Your code goes here.
    if color == 'red' and texture == 'smooth' :
        return str(1/3)[:4]
    elif color == 'red' and texture == 'bumpy' :
        return str(4/7)[:4]
    elif color == 'yellow' and texture == 'bumpy' :
        return str(2/7)[:4]
    elif color == 'yellow' and texture == 'smooth' :
        return str(1/3)[:4]
    elif color == 'green' and texture == 'smooth' :
        return str(1/3)[:4]
    else :
        return str(1/7)[:4]
        
   
   
   
   def categorize_study(p_value, requirements):
    bs_factor = 0

    if requirements == 6:
        bs_factor = 1
    elif requirements == 5:
        bs_factor = 2
    elif requirements == 4:
        bs_factor = 4
    elif requirements == 3:
        bs_factor = 8


    product = p_value * bs_factor

    if product < 0.05:
        return "Fine"
    elif product > 0.05 and product < 0.15:
        return "Needs review"
    elif product >= 0.15:
        return "Pants on fire"
   
  
  def longest(words):
    # Your code here
    longest_idx = 0
    for index in words:
        if len(index)>longest_idx:
            longest_idx = len(index)
    return longest_idx
   
  
  
  def calculate_grade(scores):
    # Your code here.
        mean_score = sum(scores)/len(scores)
        
        if mean_score >= 90 : #and mean_score <= 100:
            return 'A'
        elif mean_score >= 80 : #and mean_score <= 90:
            return 'B'
        elif mean_score >= 70 : #and mean_score <= 80:
            return 'C'
        elif mean_score >= 60 : #and mean_score <= 70:
            return 'D'
        elif mean_score < 60:
            return 'F'
            
            
            
    def process_data(data):
    # Your code here
    
    result = 1
    
    for i in data:
        result *=i[0] - i[-1]
    return result
    
    
    
   def inverse_slice(items, a, b):
    # Your code here.
    del items[a:b]
    return items
    
    
    
    
 Oder Filler 
 
 def fillable(stock, merch, n):
    # Your code goes here.
    if stock.get(merch) is None:
        return False
    else:
        return stock.get(merch) >= n
        

User Contacts 

def user_contacts(data):
    # Your code here.
    result = {}
    for i in data :
        if len(i) == 1:
            result[i[0]] = None
        else:
            result[i[0]] = i[1]
    return result
    


Multiple Modes 

def modes(data):
    # Your code here.
        result_dict = {}
        for idx, i in enumerate(data):
                if result_dict.get(i):
                        result_dict[i] += 1
                else:
                        result_dict[i] = 1
        print(result_dict)

        res = []

        res =  [k for k,v in result_dict.items() if v == max(result_dict.values())]
        if len(res) == len(data):
                return []
        else:
                return res
 

 Vectors
 
 class Vector(object):
    def __init__(self, *args):
        if len(args) == 0:
            self.values = (0,0)
        else:
            self.values = args
            self.x = self.values[0]
            self.y = self.values[1]

    def add(self, vector):
        added = tuple(a + b for a, b in zip(self.values, vector.values))
        return Vector(*added)
        
      
 PUZZELBOX
 
 
      
      
  
  
  
 
  
 QUARK
  
  
  class Quark(object):
    # Your code here.
    def __init__(self, *args):
        if args[0] in ("red", "blue", "green"):
            self.color = args[0]
        else:
            raise Exception
        if args[1] in ('up', 'down', 'strange', 'charm', 'top', 'bottom'):
            self.flavor = args[1]
        else:
            raise Exception
        self.baryon_number = 1.0/3

    def interact(self, quark):
        temp_color = self.color
        self.color = quark.color
        quark.color = temp_color
    
    
    
  

