def celsius_to_romer(temp):
    # Your code here.
    return (temp * 21/40) + 7.5


def is_divisible(wall_length, pixel_size):
    # Your code here.
    return wall_length%pixel_size == 0
    

def guess_blue(blue_start, red_start, blue_pulled, red_pulled):
    # Your code here.
    return (blue_start-blue_pulled)/((blue_start-blue_pulled)+(red_start-red_pulled))
    
def box_capacity(length, width, height):
    # Your code here.
    return (length*width*height)*(0.75)**3
    

def quadratic_formula(a, b, c):
    import math
    root1 = (-b+math.sqrt((b**2)-(4*(a*c))))/(2*a)
    
    root2 = (-b-math.sqrt((b**2)-(4*(a*c))))/(2*a)
    
    return [root1, root2]
    
 
Logic / Control Flow

def update_light(current):
    # Your code here.
    if     current == 'green':
        return 'yellow'
    elif   current == 'yellow':
        return 'red'
    else: 
        return 'green'
     
        
        
        
 def take_umbrella(weather, rain_chance):
    # Your code here.
    a = weather == 'rainy'

    b = weather == 'cloudy' and rain_chance > 0.20

    c = weather == 'sunny' and rain_chance > 0.5
    
    return bool(a or b or c)
  
  
  
  def my_add(a, b):
    # Your code here.
    try:
        return a+b
    except TypeError:
        return None
        

def color_probability(color, texture):
    # Your code goes here.
    if color == 'red' and texture == 'smooth' :
        return str(1/3)[:4]
    elif color == 'red' and texture == 'bumpy' :
        return str(4/7)[:4]
    elif color == 'yellow' and texture == 'bumpy' :
        return str(2/7)[:4]
    elif color == 'yellow' and texture == 'smooth' :
        return str(1/3)[:4]
    elif color == 'green' and texture == 'smooth' :
        return str(1/3)[:4]
    else :
        return str(1/7)[:4]
        
   
   
   
   def categorize_study(p_value, requirements):
    bs_factor = 0

    if requirements == 6:
        bs_factor = 1
    elif requirements == 5:
        bs_factor = 2
    elif requirements == 4:
        bs_factor = 4
    elif requirements == 3:
        bs_factor = 8


    product = p_value * bs_factor

    if product < 0.05:
        return "Fine"
    elif product > 0.05 and product < 0.15:
        return "Needs review"
    elif product >= 0.15:
        return "Pants on fire"
   
  
  

